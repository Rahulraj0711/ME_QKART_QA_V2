/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;
    public static WebDriverWait wait;

    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName("chrome");
        RemoteWebDriver driver = new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s", String.valueOf(java.time.LocalDateTime.now()), type,
                message, status));
    }

    public static void takeScreenshot(RemoteWebDriver driver, String screenshotType, String description) {
        // CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't
         * 2. Generate a unique string using the timestamp
         * 3. Capture screenshot
         * 4. Save the screenshot inside the "/screenshots" folder using the following
         * naming convention: screenshot_<Timestamp>_<ScreenshotType>_<Description>.png
         * eg: screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */
        File scrDir = new File("/screenshots");
        if (!scrDir.exists()) {
            scrDir.mkdirs();
        }

        String timestamp = String.valueOf(LocalDateTime.now()).replace(":", "_");
        String path = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType, description);

        TakesScreenshot screenshot = (TakesScreenshot) driver;
        File srcFile = screenshot.getScreenshotAs(OutputType.FILE);
        File destFile = new File("screenshots/" + path);
        try {
            FileUtils.copyFile(srcFile, destFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Boolean waitForValidProductSearch(RemoteWebDriver driver, String product) {
        FluentWait<RemoteWebDriver> fWait = new FluentWait<>(driver).pollingEvery(Duration.ofMillis(250))
                .withTimeout(Duration.ofSeconds(30)).ignoring(Exception.class);
        boolean value = fWait.until(new Function<WebDriver, Boolean>() {
            @Override
            public Boolean apply(WebDriver d) {
                List<WebElement> items = d.findElements(By.cssSelector("div.card div.css-1qw96cp p:nth-of-type(1)"));
                boolean flag = false;
                int count = 0;
                for (WebElement e : items) {
                    if (e.getText().toLowerCase().contains(product.toLowerCase())) {
                        count++;
                    }
                }
                if (items.size() == count) {
                    flag = true;
                }
                return flag;
            }
        });
        return value;
    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase01");
        Boolean status;
        logStatus("Start TestCase", "TestCase 01: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 01", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "TestCase 01: Verify user Registration : ", status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            takeScreenshot(driver, "Error", "TestCase01");
            return false;
        } else {
            logStatus("TestCase 01", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Error", "TestCase01");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase01");
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase02");
        Boolean status;
        logStatus("Start Testcase", "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Error", "TestCase02");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "FAIL" : "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase02");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase03");
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Search for the "yonex" product
        homePage.searchForProduct("yonex");
        status = waitForValidProductSearch(driver, "yonex");

        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            takeScreenshot(driver, "Error", "TestCase03");
            return false;
        }

        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();

        // Verify the search results are available
        if (searchResults.size() == 0) {
            logStatus("TestCase 3", "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                        "FAIL");
                takeScreenshot(driver, "Error", "TestCase03");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        wait.until(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector("div.card")));
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            takeScreenshot(driver, "Error", "TestCase03");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success", "Successfully validated that no products found message is displayed", "PASS");
            }
            logStatus("TestCase 3", "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available", "FAIL");
            takeScreenshot(driver, "Error", "TestCase03");
            return false;
        }
        takeScreenshot(driver, "EndTestCase", "TestCase03");
        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as
     * expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase04");
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Search for product and get card content element of search results
        homePage.searchForProduct("Running Shoes");
        status = waitForValidProductSearch(driver, "Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link", "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down", status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart()) {
                    FluentWait<RemoteWebDriver> fwait=new FluentWait<>(driver).withTimeout(Duration.ofSeconds(30)).pollingEvery(Duration.ofMillis(250)).ignoring(Exception.class);
                    fwait.until(new Function<RemoteWebDriver,Boolean>() {
                        @Override
                        public Boolean apply(RemoteWebDriver arg0) {
                            List<WebElement> headers=driver.findElements(By.cssSelector("table.MuiTable-root.css-1v2fgo1 th"));
                            List<String> actualHeaders=new ArrayList<>();
                            for(int i=0;i<headers.size();i++) {
                                actualHeaders.add(headers.get(i).getText());
                            }
                            return actualHeaders.equals(expectedTableHeaders);
                        }   
                    });
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver)) {
                        logStatus("Step Success", "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure", "Failure while validating contents of Size Chart Link", "FAIL");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    takeScreenshot(driver, "Error", "TestCase04");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                takeScreenshot(driver, "Error", "TestCase04");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase04");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is
     * working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase05");
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        homePage.searchForProduct("Yonex");
        status = waitForValidProductSearch(driver, "Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        homePage.searchForProduct("Tan");
        status = waitForValidProductSearch(driver, "Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        wait.until(ExpectedConditions.urlContains("thanks"));

        // Check if placing order redirected to the Thanks page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase05");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase06");
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // Register a new user
        registration.navigateToRegisterPage();
        registration.registerUser("RahulTester2", "Password1", true);
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Login using the newly registed user
        login.navigateToLoginPage();
        login.PerformLogin(lastGeneratedUserName, "Password1");
        // homePage.navigateToHome();

        // Add "Xtend Smart Watch" to cart
        homePage.searchForProduct("Xtend Smart Watch");
        waitForValidProductSearch(driver, "Xtend Smart Watch");
        homePage.addProductToCart("Xtend Smart Watch");

        // Add "Yarine Floor Lamp" to cart
        homePage.searchForProduct("Yarine Floor Lamp");
        waitForValidProductSearch(driver, "Yarine Floor Lamp");
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        wait = new WebDriverWait(driver, Duration.ofSeconds(30));
        wait.until(ExpectedConditions.urlContains("thanks"));

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase06");
        return status;
    }


    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase07");
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        homePage.searchForProduct("Stylecon");
        status = waitForValidProductSearch(driver, "Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("button.checkout-btn")));

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        // wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        // wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div#notistack-snackbar")));

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase07");
        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        // CRIO_TASK_MODULE_SYNCHRONISATION - Multitab Scenario
        takeScreenshot(driver, "StartTestCase", "TestCase08");
        Boolean status = false;
        logStatus("Start TestCase", "TestCase 08: Multitab Scenario", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        registration.navigateToRegisterPage();
        registration.registerUser("Rahulraj", "password", true);
        lastGeneratedUserName = registration.lastGeneratedUsername;

        login.navigateToLoginPage();
        login.PerformLogin(lastGeneratedUserName, "password");

        homePage.searchForProduct("YONEX Smash Badminton Racquet");
        waitForValidProductSearch(driver, "YONEX Smash Badminton Racquet");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("button.checkout-btn")));

        driver.switchTo().newWindow(WindowType.TAB);
        driver.get("https://crio-qkart-frontend-qa.vercel.app/");
        status = homePage.verifyCartContents(Arrays.asList("YONEX Smash Badminton Racquet"));
        Set<String> setHandles = driver.getWindowHandles();
        List<String> handles = new ArrayList<>(setHandles);
        String baseTab = handles.get(0);
        // String newTab = handles.get(1);
        if (handles.size() > 1) {
            status = true;
            logStatus("TestCase 08", "Step Pass: Opened new tab and navigated to it.", status ? "PASS" : "FAIL");
        } else {
            status = false;
        }
        driver.close();
        driver.switchTo().window(baseTab);
        logStatus("End TestCase",
                "TestCase 08: Both tabs contents are verified.",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase08");
        return status;
    }

    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        // CRIO_TASK_MODULE_SYNCHRONISATION - Verify Privacy Policy and Terms of Service
        Boolean status = false;
        logStatus("Start TestCase", "Test Case 09:Contents in Multiple Tabs", "DONE");
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        takeScreenshot(driver, "StartTestCase", "TestCase09");

        WebElement privacyPolicy = driver.findElement(By.partialLinkText("policy"));
        privacyPolicy.click();
        if (!driver.getCurrentUrl().contains("privacy")) {
            logStatus("TestCase 09", "Step Pass: URL does not change when clicked on Privacy Policy", "PASS");
        } else {
            logStatus("TestCase 09", "Step Failure: URL changes when clicked on Privacy Policy", "FAIL");
            return false;
        }

        WebElement termsOfService = driver.findElement(By.partialLinkText("Service"));
        termsOfService.click();
        if (!driver.getCurrentUrl().contains("service")) {
            logStatus("TestCase 09", "Step Pass: URL does not change when clicked on Terms of Service", "PASS");
        } else {
            logStatus("TestCase 09", "Step Failure: URL changes when clicked on Terms of Service", "FAIL");
            return false;
        }

        Set<String> handles = driver.getWindowHandles();
        List<String> winHandles = new ArrayList<>(handles);

        String homeTab = winHandles.get(0);
        String privacyPolicyTab = winHandles.get(2);
        String termsOfServiceTab = winHandles.get(1);

        driver.switchTo().window(privacyPolicyTab);
        wait=new WebDriverWait(driver, Duration.ofSeconds(15));
        wait.until(ExpectedConditions.urlContains("privacy"));
        String ppHeader = driver.findElement(By.cssSelector("div.greeting-container h2")).getText();
        if (ppHeader.equalsIgnoreCase("Privacy Policy")) {
            status = true;
            logStatus("TestCase 09", "Step Pass: Contents of Privacy Policy page is verified.", "PASS");
        } else {
            logStatus("TestCase 09", "Step Failure: Contents of Privacy Policy page cannot be verified.",
                    "FAIL");
            return false;
        }

        driver.switchTo().window(termsOfServiceTab);
        String tosHeader = driver.findElement(By.cssSelector("div.greeting-container h2")).getText();
        if (tosHeader.equalsIgnoreCase("Terms of Service")) {
            status = true;
            logStatus("TestCase 09", "Step Pass: Contents of Terms of Service page is verified.", "PASS");
        } else {
            logStatus("TestCase 09", "Step Failure: Contents of Terms of Service page cannot be verified.", "FAIL");
            return false;
        }
        for(String tab:winHandles) {
            if(!tab.equals(homeTab)) {
                driver.switchTo().window(tab);
                driver.close();
            }
        }
        driver.switchTo().window(homeTab);

        logStatus("End TestCase",
                "Test Case 09: Verify contents of Privacy Policy page and Terms of Service page: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase09");
        return status;
    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        // CRIO_TASK_MODULE_SYNCHRONISATION - Contact Us Scenario
        Boolean status = false;
        logStatus("Start TestCase", "Test Case 10:Contact Us Check", "DONE");
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        takeScreenshot(driver, "StartTestCase", "TestCase10");

        WebElement contactUs = driver.findElement(By.xpath("//p[contains(text(), 'Contact')]"));
        contactUs.click();
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("form.form-material")));

        driver.findElement(By.cssSelector("input[placeholder='Name']")).sendKeys("crio user");
        driver.findElement(By.cssSelector("input[placeholder='Email']")).sendKeys("criouser@gmail.com");
        driver.findElement(By.cssSelector("input[placeholder='Message']")).sendKeys("Testing the contact us page");
        driver.findElement(By.cssSelector("button.m-b-20")).click();
        status = wait.until(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector("form.form-material")));

        logStatus("End TestCase", "Test Case 10: Contact Us Link Check.", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase10");
        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        // CRIO_TASK_MODULE_SYNCHRONISATION - Check for advertisements
        takeScreenshot(driver, "StartTestCase", "TestCase11");
        Boolean status = false;
        logStatus("Start TestCase", "Test Case 11:Check for Advertisements", "DONE");
        Home homepage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);
        Checkout checkout = new Checkout(driver);

        registration.navigateToRegisterPage();
        registration.registerUser("Rahulraj", "password", true);
        lastGeneratedUserName = registration.lastGeneratedUsername;

        login.navigateToLoginPage();
        login.PerformLogin(lastGeneratedUserName, "password");

        String productName = "YONEX Smash Badminton Racquet";
        String address = "Pune, Maharashtra, India";

        homepage.searchForProduct(productName);
        waitForValidProductSearch(driver, productName);
        homepage.addProductToCart(productName);
        homepage.clickCheckout();
        checkout.addNewAddress(address);
        checkout.selectAddress(address);
        checkout.placeOrder();
        wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        wait.until(ExpectedConditions.urlContains("thanks"));

        List<WebElement> ads = driver.findElements(By.xpath("//iframe"));
        if (ads.size() == 3) {
            status = true;
            logStatus("TestCase 11", "Step Pass: Total number of ads verified.", "PASS");
        } else {
            logStatus("TestCase 11", "Step Failure: Incorrect number of ads.", "FAIL");
            return false;
        }

        WebElement ad1=driver.findElement(By.cssSelector("div.css-92t6i8 iframe:nth-of-type(1)"));
        // WebElement ad3=driver.findElement(By.xpath("//div[@class='App']/div[2]/iframe"));

        driver.switchTo().frame(ad1);
        WebElement buyNowBtton1 = driver.findElement(By.cssSelector("div.action_buttons button:nth-of-type(2)"));
        buyNowBtton1.click();
        driver.switchTo().parentFrame();
        wait=new WebDriverWait(driver, Duration.ofSeconds(15));
        status=wait.until(ExpectedConditions.urlContains("checkout"));
        if (status) {
            logStatus("TestCase 11", "Step Pass: Buy Now button in 1st Ad is clickable.", "PASS");
        } else {
            logStatus("TestCase 11", "Step Failure: Buy Now button in 1st Ad is not clickable.", "FAIL");
            return false;
        }
        driver.navigate().back();
        wait=new WebDriverWait(driver, Duration.ofSeconds(15));
        status=wait.until(ExpectedConditions.urlContains("thanks"));

        WebElement ad2=driver.findElement(By.cssSelector("div.css-92t6i8 iframe:nth-of-type(2)"));
        driver.switchTo().frame(ad2);
        WebElement buyNowButton2 = driver.findElement(By.cssSelector("div.action_buttons button:nth-of-type(2)"));
        buyNowButton2.click();
        driver.switchTo().parentFrame();
        wait=new WebDriverWait(driver, Duration.ofSeconds(15));
        status=wait.until(ExpectedConditions.urlContains("checkout"));
        if (status) {
            logStatus("TestCase 11", "Step Pass: Buy Now button in 2nd Ad is clickable.", "PASS");
        } else {
            logStatus("TestCase 11", "Step Failure: Buy Now button in 2nd Ad is not clickable.", "FAIL");
            return false;
        }
        // driver.navigate().back();

        logStatus("End TestCase", "Test Case 11: Check for Advertisements.", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase11");
        return status;
    }

    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        // Maximize and Implicit Wait for things to initailize
        RemoteWebDriver driver=createDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
            passedTests += 1;
            }
            System.out.println("");

        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ", Integer.toString(passedTests),
                    Integer.toString(totalTests)));
        }

    }
}